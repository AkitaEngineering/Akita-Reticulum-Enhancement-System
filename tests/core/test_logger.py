import unittest, logging, os, tempfile
from akita_ares.core.logger import setup_logging, get_logger, update_module_log_levels, ARES_LOGGER_NAME
class TestLogger(unittest.TestCase):
    def setUp(self): self.temp_dir = tempfile.TemporaryDirectory(); self.log_file_path = os.path.join(self.temp_dir.name, 'test_ares.log'); root_logger = logging.getLogger(ARES_LOGGER_NAME); root_logger.handlers.clear(); root_logger.setLevel(logging.CRITICAL + 1); logging.getLogger(f"{ARES_LOGGER_NAME}.TestModule").setLevel(logging.NOTSET); logging.getLogger(f"{ARES_LOGGER_NAME}.AnotherModule").setLevel(logging.NOTSET)
    def tearDown(self): root_logger = logging.getLogger(ARES_LOGGER_NAME); [h.close(); root_logger.removeHandler(h) for h in root_logger.handlers[:]]; self.temp_dir.cleanup()
    def test_setup_logging_defaults(self): setup_logging(log_file=self.log_file_path, console_output=False); root_logger = logging.getLogger(ARES_LOGGER_NAME); self.assertEqual(root_logger.level, logging.INFO); self.assertTrue(any(isinstance(h, logging.handlers.RotatingFileHandler) for h in root_logger.handlers)); self.assertTrue(os.path.exists(self.log_file_path))
    def test_setup_logging_levels(self): setup_logging(level='DEBUG', console_output=False, log_file=None); self.assertEqual(logging.getLogger(ARES_LOGGER_NAME).level, logging.DEBUG); setup_logging(level='WARNING', console_output=False, log_file=None); self.assertEqual(logging.getLogger(ARES_LOGGER_NAME).level, logging.WARNING)
    def test_get_logger(self): setup_logging(level='INFO', console_output=False, log_file=None); root_logger = get_logger(); self.assertEqual(root_logger.name, ARES_LOGGER_NAME); feature_logger = get_logger("Feature.Test"); self.assertEqual(feature_logger.name, f"{ARES_LOGGER_NAME}.Feature.Test"); self.assertEqual(feature_logger.level, logging.NOTSET); self.assertEqual(feature_logger.getEffectiveLevel(), logging.INFO) 
    def test_update_module_log_levels(self): setup_logging(level='INFO', console_output=False, log_file=None); module_levels = {f"{ARES_LOGGER_NAME}.TestModule": "DEBUG", f"{ARES_LOGGER_NAME}.AnotherModule": "WARNING", "NonAresLogger": "ERROR"}; update_module_log_levels(module_levels); self.assertEqual(get_logger().level, logging.INFO); self.assertEqual(get_logger("TestModule").level, logging.DEBUG); self.assertEqual(get_logger("AnotherModule").level, logging.WARNING)
    def test_log_file_rotation(self): setup_logging(log_file=self.log_file_path, max_bytes=50, backup_count=1, level='DEBUG', console_output=False); logger = get_logger("RotationTest"); [logger.debug(f"Line {i}") for i in range(20)]; self.assertTrue(os.path.exists(self.log_file_path))
    def test_cli_override_logging(self): config_log_config = {"level": "INFO", "module_levels": {"ARES.Module1": "DEBUG"}}; cli_override_level = "WARNING"; effective_root_level = cli_override_level or config_log_config.get('level'); setup_logging(level=effective_root_level, module_levels=config_log_config.get('module_levels'), console_output=False, log_file=None); self.assertEqual(get_logger().level, logging.WARNING); self.assertEqual(get_logger("Module1").level, logging.DEBUG)
